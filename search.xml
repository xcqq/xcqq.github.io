<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>KASAN原理简析</title>
    <url>/2020/04/02/KASAN/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>KASAN是一个动态检测内存错误的工具。通常的use-after-free问题使用slab debug就可以轻易的找出。但是out-of-bounds的问题他就无能为力了。这时候就需要使用KASAN工具，KASAN提供了在每次内存访问时的检查。当发生内存非法的访问时，能够立刻检测到并且提供相关信息。</p>
<h1 id="如何打开"><a href="#如何打开" class="headerlink" title="如何打开"></a>如何打开</h1><p>在kernel中打开KASAN非常简单，只要配置CONFIG_KASAN=y即可。需要注意的是，KASAN本身在检测到错误的时候并不会使得kernel crash，所以我们需要检测系统的log输出，避免错过了一些错误的信息。此外KASAN enable后会极大的拖慢系统运行速度，增加内存占用，因而只适合在代码调试的时候使用。</p>
<h2 id="KASAN相关选项"><a href="#KASAN相关选项" class="headerlink" title="KASAN相关选项"></a>KASAN相关选项</h2><ul>
<li>CONFIG_KASAN<br>这是KASAN的基础功能开关 ，会增加1/8的内存占用，运行时间大约会延长3倍。</li>
<li>CONFIG_KASAN_EXTRA<br>用来检查是否有局部变量在函数外使用的错误。具体的描述和例子可以参照这个链接：</li>
</ul>
<p><a href="https://github.com/google/sanitizers/wiki/AddressSanitizerUseAfterScope" target="_blank" rel="noopener">google/sanitizers</a></p>
<ul>
<li>Instrumentation type<br>这里我们可以选择inline或者outline，他决定了编译器如何插入memory access函数。inline表示采用inline的方式将函数直接插入到各个内存访问的地方，会增大text段大小，但是效率较高。outline则正好相反，速度较慢但text不会增大太多。</li>
</ul>
<h2 id="关闭特定文件的KASAN检测"><a href="#关闭特定文件的KASAN检测" class="headerlink" title="关闭特定文件的KASAN检测"></a>关闭特定文件的KASAN检测</h2><p>在对应的Makefile里增加以下代码可以关闭该文件的KASAN检测</p>
<p>KASAN_SANITIZE_xxx.o := n</p>
<h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p>KASAN的基本原理是利用额外的内存来标记内存是否可用。这部分额外的内存被称作shadow memory。在我们打开KAKAN时候，编译器会自动在每次内存访问之前插入一段代码来检查shadow memory。</p>
<p><img src="/images/2020/04/02/4ee8a130-74e6-11ea-8a0b-b986e8190610.png" alt="kasanshadowmemory.png"></p>
<p>从上图可以看出shadow memory如何实现的valid判断。系统中使用1/8的内存作为shadow memory，没连续的8bytes内存对应了1byte的shadow memory。如果这8bytes都是可以访问的，那么shadow memory为0。如果此时有连续N个byte可以访问，则shadow memory为N。所有bytes都是invalid的时候，shadow memory为负。kernel当中为不同的invalid类型定义了不同的值，方便在出错时标记处错误类型。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> KASAN_FREE_PAGE         0xFF  <span class="comment">/* page was freed */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> KASAN_PAGE_REDZONE      0xFE  <span class="comment">/* redzone for kmalloc_large allocations */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> KASAN_KMALLOC_REDZONE   0xFC  <span class="comment">/* redzone inside slub object */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> KASAN_KMALLOC_FREE      0xFB  <span class="comment">/* object was freed (kmem_cache_free/kfree) */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> KASAN_GLOBAL_REDZONE    0xFA  <span class="comment">/* redzone for global variable */</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Stack redzone shadow values</span></span><br><span class="line"><span class="comment"> * (Those are compiler's ABI, don't change them)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> KASAN_STACK_LEFT        0xF1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> KASAN_STACK_MID         0xF2</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> KASAN_STACK_RIGHT       0xF3</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> KASAN_STACK_PARTIAL     0xF4</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> KASAN_USE_AFTER_SCOPE   0xF8</span></span><br></pre></td></tr></table></figure>

<p>这里举个例子，假如现在共有16个字节，在8-15字节的前五个字节是可写的。这时候我们访问11字节，11&amp;7=3计算出相对于8字节的偏移量，所以这是只要shadows memory是大于或者等于3的就是valid.</p>
<p>到这里似乎一切原理已经变得很明了了。但是这里有个问题：全局变量和局部变量的内存分配都是连续的，而slab系统分配出的内存头尾则会有相应的管理结构。也就是说，前后的数据其实也都是valid，既然前后的内存都是valid，那又怎么通过shadow memory来判断是否可以读写呢？</p>
<p>回顾KASAN的历史可以发现，在KASAN早期的时候，我们需要enable slab debug才能使用KASAN的相关功能。slab debug会在内存的前后都增加一部分red zone，用来检测内存的越界访问。但是对于red zone的检测只有在slab malloc或者free的时候才能检测。而KASAN正是使用了这部分red zone的内存，将他们标记成invalid的部分，并且在内存访问的时候立刻去检查shadow memory，这样才实现非法访问的实时监测。全局变量和局部变量正常情况下不存在的red zone。所以enable KASAN之后，编译器会帮我们完成red zone的添加。所以除了shadow memory和额外代码的插桩之外，redzone的添加也是实现KASAN不可缺少的一个环节。</p>
<h1 id="shadow-memory内存的分配"><a href="#shadow-memory内存的分配" class="headerlink" title="shadow memory内存的分配"></a>shadow memory内存的分配</h1><p>内存地址的映射遵循着以下的关系：</p>
<p>shadow = (addr &gt;&gt; 3) + offset</p>
<p>在kernel启动的时候会分配相应的虚拟地址空间。而offset根据不同平台的memory map会有所不同。而虚拟地址和物理地址必须建立映射之后才能正常访问。所以在kernel启动初期到kasan_init()执行结束之前，KASAN是无法正常工作的。</p>
<h1 id="shadow-memory和redzone的填充"><a href="#shadow-memory和redzone的填充" class="headerlink" title="shadow memory和redzone的填充"></a>shadow memory和redzone的填充</h1><h2 id="slub分配器"><a href="#slub分配器" class="headerlink" title="slub分配器"></a>slub分配器</h2><p><img src="/images/2020/04/02/42bbb780-74e6-11ea-8a0b-b986e8190610.png" alt="kasanslaborigin.png"></p>
<p><img src="/images/2020/04/02/4852afa0-74e6-11ea-8a0b-b986e8190610.png" alt="kasanslab.png"></p>
<p>从上图可以看出来，在开启KASAN之后，会在object中增加对于alloc和free的追踪数据，此外还有一部分作为额外redzone。</p>
<p>在slab缓冲池创建的时候，所有的shadow memory都被置为0xFC。随后执行kmalloc的时候，需要使用的那部分内存被相应的更改，多余的内存依旧被置为invalid（比如申请一个30长度的内存，那么剩下两个字节就是invalid）。这时候如果访问到了invalid的内存，则是out-of-bound的问题。</p>
<p>当free的时候，shadow memory则会被置为0xFB，这时候如果访问内存，则是use after free的问题。</p>
<h2 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h2><p>slub分配器的redzone填充是在申请的时候完成的。而全局变量则是由编译器代劳，帮助我们完成redzone的分配和填充。</p>
<p>需要注意的是，KASAN只会针对数组和结构体变量做检查。普通变量由于一般不会由指针进行操作，所以不存在越界问题。</p>
<p>这里举个例子，假如我们申请的全局变量original[4]，编译器会在末尾帮我们补上长度为60的redzone。zedzone长度的是原本的变量向32bytes对齐之后，再加上32字节。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="keyword">char</span> original[<span class="number">4</span>];</span><br><span class="line">    <span class="keyword">char</span> redzone[<span class="number">60</span>];</span><br><span class="line">&#125; a; <span class="comment">//32 bytes aligned</span></span><br></pre></td></tr></table></figure>

<h2 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h2><p>局部变量是在stack中进行分配的，由于stack中不光存储了局部变量，还存有函数参数，寄存器等信息。所以和全局变量相比，还需要在局部变量前加入redzone，以避免左边越界的问题。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">foo</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">char</span> rz1[<span class="number">32</span>]; <span class="comment">// 32-byte aligned</span></span><br><span class="line">		<span class="keyword">char</span> a[<span class="number">328</span>];</span><br><span class="line">		<span class="keyword">char</span> rz2[<span class="number">24</span>];</span><br><span class="line">		<span class="keyword">char</span> rz3[<span class="number">32</span>];</span><br><span class="line">		<span class="keyword">int</span> *shadow =(&amp;rz1 &gt;&gt;<span class="number">3</span>)+ kOffset;</span><br><span class="line">		shadow[<span class="number">0</span>]=<span class="number">0xffffffff</span>;<span class="comment">// poison rz1 </span></span><br><span class="line">		shadow[<span class="number">11</span>]=<span class="number">0xffffff00</span>;<span class="comment">// poison rz2 </span></span><br><span class="line">		shadow[<span class="number">12</span>]=<span class="number">0xffffffff</span>;<span class="comment">// poison rz3</span></span><br><span class="line">		<span class="comment">/*------------- CODE -------------*/</span></span><br><span class="line">		shadow[<span class="number">0</span>]= shadow[<span class="number">11</span>]= shadow[<span class="number">12</span>]=<span class="number">0</span>;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p>变量前插入的redzone长度为32字节，变量后redzone插入的长度依旧是遵循之前提到的原则，向32字节对齐后再加上32字节。这里的例子是从作者的ppt中截取出来的，不过似乎作者把posion的值给弄错了。按照kernel中定义的poison，正确的代码应该是下面这样的：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">foo</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">char</span> rz1[<span class="number">32</span>]; <span class="comment">// 32-byte aligned</span></span><br><span class="line">		<span class="keyword">char</span> a[<span class="number">328</span>];</span><br><span class="line">		<span class="keyword">char</span> rz2[<span class="number">24</span>];</span><br><span class="line">		<span class="keyword">char</span> rz3[<span class="number">32</span>];</span><br><span class="line">		<span class="keyword">int</span> *shadow =(&amp;rz1 &gt;&gt;<span class="number">3</span>)+ kOffset;</span><br><span class="line">		shadow[<span class="number">0</span>]=<span class="number">0xf1f1f1f1</span>;<span class="comment">// poison rz1 </span></span><br><span class="line">		shadow[<span class="number">11</span>]=<span class="number">0xf2f2f200</span>;<span class="comment">// poison rz2 </span></span><br><span class="line">		shadow[<span class="number">12</span>]=<span class="number">0xf3f3f3f3</span>;<span class="comment">// poison rz3</span></span><br><span class="line">		<span class="comment">/*------------- CODE -------------*/</span></span><br><span class="line">		shadow[<span class="number">0</span>]= shadow[<span class="number">11</span>]= shadow[<span class="number">12</span>]=<span class="number">0</span>;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>linux kernel</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>kernel</tag>
        <tag>KASAN</tag>
      </tags>
  </entry>
  <entry>
    <title>linux notifier chain</title>
    <url>/2020/04/02/linux-notifier-chain/</url>
    <content><![CDATA[<p>notifier chain在Linux kernel中被用来实现不同的subsystem之间的通信。简单的来说，notifier chain是一个存储了某个事件对应的回调函数的列表。每个notifier chain都和特定的事件相关，当发出事件通知的时候，会触发对应的回调函数来处理该事件。</p>
<p>kernel中共设计了四种不同的notifier chain类型：</p>
<ul>
<li>atomic notifier：回调函数在原子上下文中执行，不可阻塞</li>
<li>blocking notifier:回调函数在进程上下文中执行，可以阻塞</li>
<li>raw notifier:回调函数没有任何限制，但加锁、保护等操作需要由调用者自行完成</li>
<li>SRCU notifier: 回调函数同样是在进程上下文中执行的，是blocking notifier的一种变体</li>
</ul>
<h1 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h1><p>Notifier chain的数据结构有notifier list和notifier block两个部分构成。notifier list就是用来存储notifier block的链表。</p>
<p>notifier chain根据类型不同分为四种notifier list结构： </p>
<ul>
<li><p>atomic_notifier_head: 使用spin lock保护链表，发送通知时使用RCU进行同步</p>
  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">atomic_notifier_head</span> &#123;</span></span><br><span class="line">	<span class="keyword">spinlock_t</span> lock;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">notifier_block</span> __<span class="title">rcu</span> *<span class="title">head</span>;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
</li>
<li><p>blocking_notifier_head: 使用读写信号量保护链表，发送通知使用RCU进行同步</p>
  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">blocking_notifier_head</span> &#123;</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">rw_semaphore</span> <span class="title">rwsem</span>;</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">notifier_block</span> __<span class="title">rcu</span> *<span class="title">head</span>;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
</li>
<li><p>raw_notifier_head: 没有保护链表的措施，发送通知使用RCU进行同步</p>
  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">raw_notifier_head</span> &#123;</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">notifier_block</span> __<span class="title">rcu</span> *<span class="title">head</span>;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
</li>
<li><p>srcu_notifier_head: 使用互斥锁保护链表，消息发送使用SRCU进行同步（没有使用锁机制），相比起传统的blocking notifier来说，在发送通知的时候由于保护chain所造成的开销更小</p>
  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">srcu_notifier_head</span> &#123;</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">mutex</span> <span class="title">mutex</span>;</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">srcu_struct</span> <span class="title">srcu</span>;</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">notifier_block</span> __<span class="title">rcu</span> *<span class="title">head</span>;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>事件对应的回调函数存储在notifier_block的notifier_call中，priority表示事件到来是回调执行的优先级，优先级越高的越早执行：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">notifier_block</span> &#123;</span></span><br><span class="line">	<span class="keyword">notifier_fn_t</span> notifier_call;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">notifier_block</span> __<span class="title">rcu</span> *<span class="title">next</span>;</span></span><br><span class="line">	<span class="keyword">int</span> priority;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>其中回调函数是一个notifier_fn_t类型，可以接收两个额外参数—action和data，可以用来指定操作类型、传递数据指针。返回值则可以表明执行有无错误。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">typedef</span>	<span class="title">int</span> <span class="params">(*<span class="keyword">notifier_fn_t</span>)</span><span class="params">(struct notifier_block *nb,</span></span></span><br><span class="line"><span class="function"><span class="params">			<span class="keyword">unsigned</span> <span class="keyword">long</span> action, <span class="keyword">void</span> *data)</span></span>;</span><br></pre></td></tr></table></figure>

<h1 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h1><h2 id="notifier-list定义和初始化"><a href="#notifier-list定义和初始化" class="headerlink" title="notifier list定义和初始化"></a>notifier list定义和初始化</h2><p>我们可以使用以下的宏来定义并初始化某种类型的list，这些宏在定义变量的同时也会初始化结构体中相应的成员：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">ATOMIC_NOTIFIER_HEAD(name)</span><br><span class="line">BLOCKING_NOTIFIER_HEAD(name)</span><br><span class="line">RAW_NOTIFIER_HEAD(name)</span><br><span class="line">SRCU_NOTIFIER_HEAD(name)</span><br><span class="line">SRCU_NOTIFIER_HEAD_STATIC(name)</span><br></pre></td></tr></table></figure>

<h2 id="注册和移除block"><a href="#注册和移除block" class="headerlink" title="注册和移除block"></a>注册和移除block</h2><p>注册和移除block的时候，由于不同类型使用了不同的方法来保护链表，所以我们需要调用相应类型的注册函数：</p>
<ul>
<li><p>atomic notifier在注册和移除的时候会使用spin lock来保护链表结构。</p>
  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">atomic_notifier_chain_register</span><span class="params">(struct atomic_notifier_head *nh,</span></span></span><br><span class="line"><span class="function"><span class="params">		struct notifier_block *n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">unsigned</span> <span class="keyword">long</span> flags;</span><br><span class="line">	<span class="keyword">int</span> ret;</span><br><span class="line"></span><br><span class="line">	spin_lock_irqsave(&amp;nh-&gt;lock, flags);</span><br><span class="line">	ret = notifier_chain_register(&amp;nh-&gt;head, n);</span><br><span class="line">	spin_unlock_irqrestore(&amp;nh-&gt;lock, flags);</span><br><span class="line">	<span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">atomic_notifier_chain_unregister</span><span class="params">(struct atomic_notifier_head *nh,</span></span></span><br><span class="line"><span class="function"><span class="params">		struct notifier_block *n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">unsigned</span> <span class="keyword">long</span> flags;</span><br><span class="line">	<span class="keyword">int</span> ret;</span><br><span class="line"></span><br><span class="line">	spin_lock_irqsave(&amp;nh-&gt;lock, flags);</span><br><span class="line">	ret = notifier_chain_unregister(&amp;nh-&gt;head, n);</span><br><span class="line">	spin_unlock_irqrestore(&amp;nh-&gt;lock, flags);</span><br><span class="line">	synchronize_rcu();</span><br><span class="line">	<span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>blocking notifier在注册和移除的时候使用读写锁保护链表结构。</p>
  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">blocking_notifier_chain_register</span><span class="params">(struct blocking_notifier_head *nh,</span></span></span><br><span class="line"><span class="function"><span class="params">		struct notifier_block *n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> ret;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	 * This code gets used during boot-up, when task switching is</span></span><br><span class="line"><span class="comment">	 * not yet working and interrupts must remain disabled.  At</span></span><br><span class="line"><span class="comment">	 * such times we must not call down_write().</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">if</span> (unlikely(system_state == SYSTEM_BOOTING))</span><br><span class="line">		<span class="keyword">return</span> notifier_chain_register(&amp;nh-&gt;head, n);</span><br><span class="line"></span><br><span class="line">	down_write(&amp;nh-&gt;rwsem);</span><br><span class="line">	ret = notifier_chain_register(&amp;nh-&gt;head, n);</span><br><span class="line">	up_write(&amp;nh-&gt;rwsem);</span><br><span class="line">	<span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">blocking_notifier_chain_cond_register</span><span class="params">(struct blocking_notifier_head *nh,</span></span></span><br><span class="line"><span class="function"><span class="params">		struct notifier_block *n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> ret;</span><br><span class="line"></span><br><span class="line">	down_write(&amp;nh-&gt;rwsem);</span><br><span class="line">	ret = notifier_chain_cond_register(&amp;nh-&gt;head, n);</span><br><span class="line">	up_write(&amp;nh-&gt;rwsem);</span><br><span class="line">	<span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>raw notifier在注册时需要用户自己解决链表结构保护的问题。</p>
  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">raw_notifier_chain_register</span><span class="params">(struct raw_notifier_head *nh,</span></span></span><br><span class="line"><span class="function"><span class="params">		struct notifier_block *n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> notifier_chain_register(&amp;nh-&gt;head, n);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">raw_notifier_chain_unregister</span><span class="params">(struct raw_notifier_head *nh,</span></span></span><br><span class="line"><span class="function"><span class="params">		struct notifier_block *n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> notifier_chain_unregister(&amp;nh-&gt;head, n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>srcu在注册和移除的时候使用互斥锁解决链表结构的保护问题。</p>
  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">srcu_notifier_chain_register</span><span class="params">(struct srcu_notifier_head *nh,</span></span></span><br><span class="line"><span class="function"><span class="params">		struct notifier_block *n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> ret;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	 * This code gets used during boot-up, when task switching is</span></span><br><span class="line"><span class="comment">	 * not yet working and interrupts must remain disabled.  At</span></span><br><span class="line"><span class="comment">	 * such times we must not call mutex_lock().</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">if</span> (unlikely(system_state == SYSTEM_BOOTING))</span><br><span class="line">		<span class="keyword">return</span> notifier_chain_register(&amp;nh-&gt;head, n);</span><br><span class="line"></span><br><span class="line">	mutex_lock(&amp;nh-&gt;mutex);</span><br><span class="line">	ret = notifier_chain_register(&amp;nh-&gt;head, n);</span><br><span class="line">	mutex_unlock(&amp;nh-&gt;mutex);</span><br><span class="line">	<span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">srcu_notifier_chain_unregister</span><span class="params">(struct srcu_notifier_head *nh,</span></span></span><br><span class="line"><span class="function"><span class="params">		struct notifier_block *n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> ret;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	 * This code gets used during boot-up, when task switching is</span></span><br><span class="line"><span class="comment">	 * not yet working and interrupts must remain disabled.  At</span></span><br><span class="line"><span class="comment">	 * such times we must not call mutex_lock().</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">if</span> (unlikely(system_state == SYSTEM_BOOTING))</span><br><span class="line">		<span class="keyword">return</span> notifier_chain_unregister(&amp;nh-&gt;head, n);</span><br><span class="line"></span><br><span class="line">	mutex_lock(&amp;nh-&gt;mutex);</span><br><span class="line">	ret = notifier_chain_unregister(&amp;nh-&gt;head, n);</span><br><span class="line">	mutex_unlock(&amp;nh-&gt;mutex);</span><br><span class="line">	synchronize_srcu(&amp;nh-&gt;srcu);</span><br><span class="line">	<span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>他们在对于链表的保护方式上有所不同，但是真正操作链表的函数都是相同的，都是notifier_chain_register和notifier_chain_unregister。</p>
<p>notifier_chain_register根据notifier_block的优先级，将新注册的notifier_block插入到单向链表中。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">notifier_chain_register</span><span class="params">(struct notifier_block **nl,</span></span></span><br><span class="line"><span class="function"><span class="params">		struct notifier_block *n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">while</span> ((*nl) != <span class="literal">NULL</span>) &#123;</span><br><span class="line">		<span class="keyword">if</span> (n-&gt;priority &gt; (*nl)-&gt;priority)</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		nl = &amp;((*nl)-&gt;next);</span><br><span class="line">	&#125;</span><br><span class="line">	n-&gt;next = *nl;</span><br><span class="line">	rcu_assign_pointer(*nl, n);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>移除的时候同理，将notifier_block从链表中移除。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">notifier_chain_unregister</span><span class="params">(struct notifier_block **nl,</span></span></span><br><span class="line"><span class="function"><span class="params">		struct notifier_block *n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">while</span> ((*nl) != <span class="literal">NULL</span>) &#123;</span><br><span class="line">		<span class="keyword">if</span> ((*nl) == n) &#123;</span><br><span class="line">			rcu_assign_pointer(*nl, n-&gt;next);</span><br><span class="line">			<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		nl = &amp;((*nl)-&gt;next);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> -ENOENT;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>需要注意的一个小细节是在修改notifier_block结构体，把新的block加入链表的时候，使用的rcu的发布订阅机制。</p>
<h2 id="发送通知"><a href="#发送通知" class="headerlink" title="发送通知"></a>发送通知</h2><p>同样，不同类型的notifier chain也需要使用不同的发送通知的函数。</p>
<p>atomic notifier的回调函数需要在原子上下文中执行，所以回调函数不能够阻塞。内核采用RCU来保护notifier call back。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> __atomic_notifier_call_chain(struct atomic_notifier_head *nh,</span><br><span class="line">				 <span class="keyword">unsigned</span> <span class="keyword">long</span> val, <span class="keyword">void</span> *v,</span><br><span class="line">				 <span class="keyword">int</span> nr_to_call, <span class="keyword">int</span> *nr_calls)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">int</span> ret;</span><br><span class="line"></span><br><span class="line">	rcu_read_lock();</span><br><span class="line">	ret = notifier_call_chain(&amp;nh-&gt;head, val, v, nr_to_call, nr_calls);</span><br><span class="line">	rcu_read_unlock();</span><br><span class="line">	<span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">atomic_notifier_call_chain</span><span class="params">(struct atomic_notifier_head *nh,</span></span></span><br><span class="line"><span class="function"><span class="params">			       <span class="keyword">unsigned</span> <span class="keyword">long</span> val, <span class="keyword">void</span> *v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> __atomic_notifier_call_chain(nh, val, v, <span class="number">-1</span>, <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>blocking notifier的回调函数可以允许阻塞。使用读写锁保护call back。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> __blocking_notifier_call_chain(struct blocking_notifier_head *nh,</span><br><span class="line">				   <span class="keyword">unsigned</span> <span class="keyword">long</span> val, <span class="keyword">void</span> *v,</span><br><span class="line">				   <span class="keyword">int</span> nr_to_call, <span class="keyword">int</span> *nr_calls)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">int</span> ret = NOTIFY_DONE;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	 * We check the head outside the lock, but if this access is</span></span><br><span class="line"><span class="comment">	 * racy then it does not matter what the result of the test</span></span><br><span class="line"><span class="comment">	 * is, we re-check the list after having taken the lock anyway:</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">if</span> (rcu_access_pointer(nh-&gt;head)) &#123;</span><br><span class="line">		down_read(&amp;nh-&gt;rwsem);</span><br><span class="line">		ret = notifier_call_chain(&amp;nh-&gt;head, val, v, nr_to_call,</span><br><span class="line">					nr_calls);</span><br><span class="line">		up_read(&amp;nh-&gt;rwsem);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">blocking_notifier_call_chain</span><span class="params">(struct blocking_notifier_head *nh,</span></span></span><br><span class="line"><span class="function"><span class="params">		<span class="keyword">unsigned</span> <span class="keyword">long</span> val, <span class="keyword">void</span> *v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> __blocking_notifier_call_chain(nh, val, v, <span class="number">-1</span>, <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>raw notifier没有提供任何的锁机制，所以相关的锁操作必须由用户自己完成。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">raw_notifier_chain_register</span><span class="params">(struct raw_notifier_head *nh,</span></span></span><br><span class="line"><span class="function"><span class="params">		struct notifier_block *n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> notifier_chain_register(&amp;nh-&gt;head, n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>srcu nitifier使用SRCU的方法来保护call back，这样在执行call chain的时候所造成开销是非常小的。然而相对的在register或者unregister的时候就会造成很大的开销。所以通常来说适合经常发送消息，但是很少会把notifier blocks移除的场景。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> __srcu_notifier_call_chain(struct srcu_notifier_head *nh,</span><br><span class="line">			       <span class="keyword">unsigned</span> <span class="keyword">long</span> val, <span class="keyword">void</span> *v,</span><br><span class="line">			       <span class="keyword">int</span> nr_to_call, <span class="keyword">int</span> *nr_calls)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">int</span> ret;</span><br><span class="line">	<span class="keyword">int</span> idx;</span><br><span class="line"></span><br><span class="line">	idx = srcu_read_lock(&amp;nh-&gt;srcu);</span><br><span class="line">	ret = notifier_call_chain(&amp;nh-&gt;head, val, v, nr_to_call, nr_calls);</span><br><span class="line">	srcu_read_unlock(&amp;nh-&gt;srcu, idx);</span><br><span class="line">	<span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">srcu_notifier_call_chain</span><span class="params">(struct srcu_notifier_head *nh,</span></span></span><br><span class="line"><span class="function"><span class="params">		<span class="keyword">unsigned</span> <span class="keyword">long</span> val, <span class="keyword">void</span> *v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> __srcu_notifier_call_chain(nh, val, v, <span class="number">-1</span>, <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>他们最终调用的是notifier_call_chain函数，需要注意一下几个参数：</p>
<ul>
<li>nr_to_call参数表示调用的回调函数的数量，如果是-1的话这个参数无效</li>
<li>nr_calls可以记录下发出了多少次消息，也就是执行了多少个回调函数</li>
</ul>
<p>该函数的功能十分简单，遍历链表，根据设定的nr_to_call数量来执行回调，并且进行nr_calls的累加。当回调函数返回了NOTIFY_STOP的时候停止执行回调。最后该函数的返回值等于最后一次执行的回调函数的返回值。如果没有注册任何notifier block，返回NOTIFY_DONE.</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * notifier_call_chain - Informs the registered notifiers about an event.</span></span><br><span class="line"><span class="comment"> *	@nl:		Pointer to head of the blocking notifier chain</span></span><br><span class="line"><span class="comment"> *	@val:		Value passed unmodified to notifier function</span></span><br><span class="line"><span class="comment"> *	@v:		Pointer passed unmodified to notifier function</span></span><br><span class="line"><span class="comment"> *	@nr_to_call:	Number of notifier functions to be called. Don't care</span></span><br><span class="line"><span class="comment"> *			value of this parameter is -1.</span></span><br><span class="line"><span class="comment"> *	@nr_calls:	Records the number of notifications sent. Don't care</span></span><br><span class="line"><span class="comment"> *			value of this field is NULL.</span></span><br><span class="line"><span class="comment"> *	@returns:	notifier_call_chain returns the value returned by the</span></span><br><span class="line"><span class="comment"> *			last notifier function called.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">notifier_call_chain</span><span class="params">(struct notifier_block **nl,</span></span></span><br><span class="line"><span class="function"><span class="params">			       <span class="keyword">unsigned</span> <span class="keyword">long</span> val, <span class="keyword">void</span> *v,</span></span></span><br><span class="line"><span class="function"><span class="params">			       <span class="keyword">int</span> nr_to_call, <span class="keyword">int</span> *nr_calls)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> ret = NOTIFY_DONE;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">notifier_block</span> *<span class="title">nb</span>, *<span class="title">next_nb</span>;</span></span><br><span class="line"></span><br><span class="line">	nb = rcu_dereference_raw(*nl);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> (nb &amp;&amp; nr_to_call) &#123;</span><br><span class="line">		next_nb = rcu_dereference_raw(nb-&gt;next);</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> CONFIG_DEBUG_NOTIFIERS</span></span><br><span class="line">		<span class="keyword">if</span> (unlikely(!func_ptr_is_kernel_text(nb-&gt;notifier_call))) &#123;</span><br><span class="line">			WARN(<span class="number">1</span>, <span class="string">"Invalid notifier called!"</span>);</span><br><span class="line">			nb = next_nb;</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">		ret = nb-&gt;notifier_call(nb, val, v);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (nr_calls)</span><br><span class="line">			(*nr_calls)++;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (ret &amp; NOTIFY_STOP_MASK)</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		nb = next_nb;</span><br><span class="line">		nr_to_call--;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此外call back的返回值共有以下情况：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NOTIFY_DONE		0x0000		<span class="comment">/* Don't care */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NOTIFY_OK		0x0001		<span class="comment">/* Suits me */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NOTIFY_STOP_MASK	0x8000		<span class="comment">/* Don't call further */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NOTIFY_BAD		(NOTIFY_STOP_MASK|0x0002)</span></span><br><span class="line">						<span class="comment">/* Bad/Veto action */</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Clean way to return from the notifier and stop further calls.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NOTIFY_STOP		(NOTIFY_OK|NOTIFY_STOP_MASK</span></span><br></pre></td></tr></table></figure>

<h1 id="总结时间"><a href="#总结时间" class="headerlink" title="总结时间"></a>总结时间</h1><p>notifier chain为我们提供了一种简单方便的不同子系统之间的通信方法。根据使用场景不同，使用不同类型的notifier chain可以获得更高的效率。此外这种方法不同于IPC通信，回调函数和消息发出会在同一个内核进程中执行，同样适用于一些对实时性要求较高的场合。</p>
]]></content>
      <categories>
        <category>linux kernel</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>kernel</tag>
        <tag>notifier chain</tag>
      </tags>
  </entry>
</search>
